---
description: 
globs: 
alwaysApply: false
---
zzdsj-backend-api/
├── app/                       # 应用程序主目录
│   ├── api/                   # FastAPI路由接口层
│   │   ├── bridge/            # 桥接API
│   │   ├── file/              # 文件管理API
│   │   │   └── routes/        # 文件路由
│   │   ├── frontend/          # 前端API接口
│   │   │   ├── ai/            # AI相关接口
│   │   │   │   └── models/    # 模型管理
│   │   │   ├── assistants/    # 助手管理接口
│   │   │   ├── chat/          # 聊天接口
│   │   │   ├── frameworks/    # 框架集成接口
│   │   │   │   └── owl/       # OWL框架接口
│   │   │   ├── integrations/  # 集成服务接口
│   │   │   ├── knowledge/     # 知识库接口
│   │   │   ├── mcp/           # MCP服务接口
│   │   │   ├── notifications/ # 通知接口
│   │   │   ├── search/        # 搜索接口
│   │   │   ├── security/      # 安全接口
│   │   │   ├── system/        # 系统管理接口
│   │   │   ├── tools/         # 工具接口
│   │   │   ├── user/          # 用户管理接口
│   │   │   ├── voice/         # 语音功能接口
│   │   │   └── workspace/     # 工作空间接口
│   │   ├── legacy/            # 遗留API接口
│   │   │   └── backup_20250530115532/ # 历史备份
│   │   ├── owl/               # OWL框架专用API
│   │   ├── shared/            # 共享API组件
│   │   ├── tools/             # 工具API
│   │   └── v1/                # API版本1
│   │       ├── ai/            # AI服务
│   │       ├── core/          # 核心服务
│   │       └── routes/        # 路由定义
│   ├── config/                # 配置管理
│   ├── core/                  # 核心业务逻辑（遗留，逐步迁移到core/目录）
│   ├── frameworks/            # AI框架集成层
│   │   ├── agents/            # 通用代理框架
│   │   ├── agno/              # Agno代理框架
│   │   ├── fastmcp/           # FastMCP集成
│   │   │   ├── integrations/  # FastMCP集成组件
│   │   │   │   ├── providers/ # 服务提供商
│   │   │   │   └── types/     # 数据类型定义
│   │   ├── haystack/          # Haystack框架集成
│   │   ├── integration/       # 框架集成层
│   │   ├── lightrag/          # LightRAG框架集成
│   │   ├── llamaindex/        # LlamaIndex集成
│   │   │   ├── adapters/      # 适配器
│   │   │   └── voice/         # 语音处理
│   │   └── owl/               # OWL框架集成
│   │       ├── agents/        # OWL代理
│   │       ├── society/       # 智能体社会
│   │       ├── toolkits/      # 工具包
│   │       └── utils/         # OWL工具
│   ├── memory/                # 内存管理系统
│   │   └── storage/           # 存储后端
│   ├── messaging/             # 消息处理系统
│   │   ├── adapters/          # 消息适配器
│   │   ├── core/              # 消息核心
│   │   └── services/          # 消息服务
│   ├── middleware/            # 中间件组件
│   ├── models/                # 数据库模型（SQLAlchemy）
│   ├── repositories/          # 数据访问层
│   ├── schemas/               # Pydantic数据模式
│   ├── services/              # 业务服务层
│   │   ├── agents/            # 代理服务
│   │   ├── assistants/        # 助手服务
│   │   ├── auth/              # 认证服务
│   │   ├── chat/              # 聊天服务
│   │   ├── integrations/      # 集成服务
│   │   ├── knowledge/         # 知识库服务
│   │   │   └── legacy/        # 遗留知识库服务
│   │   ├── models/            # 模型服务
│   │   ├── monitoring/        # 监控服务
│   │   ├── rerank/            # 重排序服务
│   │   ├── system/            # 系统服务
│   │   └── tools/             # 工具服务
│   ├── startup/               # 应用启动配置
│   ├── tools/                 # 工具实现
│   │   ├── advanced/          # 高级工具
│   │   │   ├── context_compression/ # 上下文压缩
│   │   │   ├── integration/   # 集成工具
│   │   │   ├── reasoning/     # 推理工具
│   │   │   └── research/      # 研究工具
│   │   └── base/              # 基础工具
│   │       ├── function_calling/ # 函数调用
│   │       ├── logging/       # 日志工具
│   │       ├── metrics/       # 指标工具
│   │       ├── search/        # 搜索工具
│   │       ├── security/      # 安全工具
│   │       └── utils/         # 工具实用函数
│   ├── utils/                 # 实用工具库
│   │   ├── auth/              # 认证工具
│   │   │   ├── core/          # 认证核心（增强版）
│   │   │   ├── jwt/           # JWT处理
│   │   │   └── permissions/   # 权限管理
│   │   ├── common/            # 通用工具
│   │   ├── core/              # 核心工具
│   │   │   ├── cache/         # 缓存工具
│   │   │   ├── config/        # 配置工具
│   │   │   └── database/      # 数据库工具
│   │   ├── messaging/         # 消息工具
│   │   │   ├── core/          # 消息核心
│   │   │   └── queue/         # 队列管理
│   │   ├── monitoring/        # 监控工具
│   │   │   └── core/          # 监控核心（增强版）
│   │   ├── security/          # 安全工具
│   │   │   ├── content_filtering/ # 内容过滤
│   │   │   ├── core/          # 安全核心（增强版）
│   │   │   └── rate_limiting/ # 频率限制
│   │   ├── services/          # 服务工具
│   │   │   ├── core/          # 服务核心（增强版）
│   │   │   ├── discovery/     # 服务发现
│   │   │   ├── integration/   # 服务集成
│   │   │   └── management/    # 服务管理
│   │   ├── storage/           # 存储工具
│   │   │   ├── core/          # 存储核心
│   │   │   ├── detection/     # 存储检测
│   │   │   ├── object_storage/ # 对象存储
│   │   │   └── vector_storage/ # 向量存储
│   │   ├── text/              # 文本处理工具
│   │   │   ├── core/          # 文本核心
│   │   │   │   └── implementations/ # 具体实现
│   │   │   ├── embedding/     # 文本嵌入
│   │   │   ├── keywords/      # 关键词提取
│   │   │   ├── templating/    # 模板处理
│   │   │   └── utils/         # 文本工具
│   │   └── web/               # Web工具
│   │       ├── core/          # Web核心
│   │       └── docs/          # 文档生成
│   ├── config.py              # 应用程序配置
│   ├── db_setup.py            # 数据库设置
│   ├── dependencies.py        # 依赖注入管理
│   ├── worker.py              # Celery工作任务
│   └── celery_beat.py         # Celery定时任务
├── core/                      # 核心业务逻辑层（重构后的核心层）
│   ├── agent_builder/         # 代理构建器
│   ├── agent_chain/           # 代理链处理
│   ├── agent_manager/         # 代理管理器
│   ├── agents/                # 代理逻辑
│   ├── assistant_qa/          # 问答助手管理
│   ├── auth/                  # 认证核心
│   ├── chat/                  # 聊天核心逻辑
│   ├── chat_manager/          # 统一聊天管理
│   ├── integrations/          # 集成核心
│   ├── knowledge/             # 知识库核心管理
│   ├── mcp_service/           # MCP服务核心管理
│   ├── model_manager/         # 模型连接管理
│   ├── monitoring/            # 监控核心
│   ├── nl_config/             # 自然语言配置
│   ├── owl_controller/        # OWL框架控制器
│   ├── searxng/               # SearxNG搜索管理
│   ├── system_config/         # 系统配置核心
│   ├── tool_orchestrator/     # 工具编排核心
│   ├── tools/                 # 工具核心管理
│   └── voice/                 # 语音处理核心
├── config/                    # 配置文件目录
├── docker/                    # Docker配置
│   ├── lightrag/              # LightRAG Docker配置
│   └── searxng/               # SearxNG Docker配置
├── migrations/                # Alembic数据库迁移
│   ├── db_memory/             # 内存数据库迁移
│   ├── sql/                   # SQL迁移脚本
│   │   └── common/            # 通用SQL脚本
│   ├── vector_migrations/     # 向量数据库迁移
│   └── versions/              # 迁移版本
├── scripts/                   # 运维脚本
│   ├── config/                # 配置脚本
│   ├── database/              # 数据库脚本
│   ├── deployment/            # 部署脚本
│   ├── maintenance/           # 维护脚本
│   ├── misc/                  # 杂项脚本
│   ├── monitoring/            # 监控脚本
│   ├── scripts_backup/        # 脚本备份
│   ├── storage/               # 存储脚本
│   └── testing/               # 测试脚本
├── static/                    # 静态文件
├── tests/                     # 测试文件
│   └── test_exports/          # 测试导出
├── uploads/                   # 上传文件目录
│   └── 2025/                  # 按年份组织
│       └── 06/                # 按月份组织
│           └── 03/            # 按日期组织
├── alembic.ini                # Alembic配置
├── config.yaml                # 系统配置文件
├── database_complete.sql      # 完整数据库结构
├── database_init.sql          # 数据库初始化脚本
├── docker-compose.yml         # 完整基础设施设置
├── docker-compose.minimal.yml # 最小化部署配置
├── env.example                # 环境变量模板
├── env.vector_db.example      # 向量数据库环境变量模板
├── pyproject.toml             # Python项目配置
├── README.md                  # 项目说明文档
├── requirements.txt           # Python依赖项
├── requirements-dev.txt       # 开发依赖项
└── requirements-minimal.txt   # 最小依赖项

### 核心组件

- **FastAPI**：高性能REST API框架
- **PostgreSQL**：用于结构化数据的关系型数据库
- **Milvus**：用于嵌入和相似度搜索的向量数据库
- **Redis**：缓存和发布/订阅消息
- **MinIO**：文档文件的对象存储
- **RabbitMQ**：用于异步处理的消息队列
- **Nacos**：服务发现和配置管理
- **Celery**：用于后台处理的分布式任务队列
- **LlamaIndex**：知识库检索和代理框架（完全替代LangChain）
- **Alembic**：数据库迁移管理工具
- **OWL框架**：新增的业务框架
- **LightRAG**：轻量级检索增强生成框架

### 关键架构特点

#### 🏗️ 三层架构设计
- **API层** (`app/api/`)：前端接口和路由管理
- **服务层** (`app/services/`, `core/`)：业务逻辑处理
- **数据层** (`app/repositories/`, `app/models/`)：数据访问和模型定义

#### 🔧 工具基础设施完善
- **基础工具类** (`app/utils/*/core/`)：提供横切关注点的统一处理
  - 服务基础类：异步上下文管理器、生命周期管理、服务注册表
  - 认证工具类：令牌管理、会话管理、权限缓存
  - 安全工具类：威胁检测、安全事件管理、风险评估
  - 监控工具类：性能监控、指标收集、健康检查

#### 🤖 AI框架集成
- **多框架支持**：LlamaIndex、OWL、LightRAG、FastMCP
- **统一接口**：框架工厂模式和管理器统一调度
- **工具系统**：完整的工具注册、执行和编排机制

#### 📊 增强特性
- **完整的数据模型验证**：52个自定义验证器，65种错误类型
- **安全增强**：威胁检测、IP阻止、风险评分系统
- **监控完善**：性能指标、健康检查、告警机制
- **缓存优化**：多级缓存策略，权限缓存，会话管理

### 请注意以下关键更新

- ✅ 项目已完全移除LangChain依赖，转向使用LlamaIndex作为统一框架
- ✅ 新增了OWL框架和LightRAG功能
- ✅ 增加了数据库迁移支持（Alembic）
- ✅ 新增了repositories和services目录，优化了三层架构
- ✅ 引入了启动配置（startup）和中间件（middleware）模块
- ✅ **任务2.5.1完成**：工具类基础设施全面增强，支持异步管理、威胁检测、会话管理等高级功能
- ✅ 完整的工具系统：基础工具、高级工具、工具编排和执行管理

- ✅ 增强的安全机制：自动威胁检测、IP阻止、风险评估和安全事件管理